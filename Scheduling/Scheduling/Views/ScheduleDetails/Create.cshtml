@model Scheduling.Models.EF.ScheduleDetail

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>ScheduleDetail</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Formation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Formation)
                    @Html.ValidationMessageFor(model => model.Formation, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ScheduleId, "ScheduleId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ScheduleId", null, htmlAttributes: new { @class = "form-control", @id = "ddlSchedule" })
                @Html.ValidationMessageFor(model => model.ScheduleId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DepartmentId, "DepartmentId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DepartmentId", null, "-- Select --", htmlAttributes: new { @class = "form-control", @id = "ddlDepartment" })
                @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JobId, "JobId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("JobId", null, "-- Select --", htmlAttributes: new { @class = "form-control", @id = "ddlJob" })
                @Html.ValidationMessageFor(model => model.JobId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeId, "EmployeeId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("EmployeeId", null,"-- Select --", htmlAttributes: new { @class = "form-control", @id = "ddlEmployee" })
                @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">

    var ddldepartment = document.getElementById('ddlDepartment');
    var ddljob = document.getElementById('ddlJob');
    var ddlemployee = document.getElementById('ddlEmployee');

    ddldepartment.addEventListener("change", (e) => { departmentChange(e); });
    ddljob.addEventListener("change", (e) => { jobChange(e); });

    function departmentChange(e) {
        e.preventDefault();
        console.log('Department As Changed!');

        // Department ID
        var departmentid = ddldepartment.options[ddldepartment.selectedIndex].value;
        console.log('Department ID = ' + departmentid);

        // Clear the options
        ddljob.options.length = 0;

        console.log('Selected Index = ' + ddljob.options.selectedIndex)

        if (departmentid > 0) {
            // Request the jobs
            $.ajax({
                method: 'post',
                url: '@Url.Action("GetJob")',
                data: { 'departmentid': departmentid },
                datatype: 'json',
                traditional: true,
                success: function (data) {
                    $.each(data, function (i, job) {
                        var option = document.createElement("option");
                        option.text = job.Title;
                        option.value = job.JobId;
                        ddljob.appendChild(option);
                    });
                },
                error: function (ex) {
                    alert('Failed, ' + ex);
                }
            });
        }

    }

    function jobChange(e) {
        e.preventDefault();
        console.log('Job As Changed!');

        // Job Id
        var jobid = ddljob.options[ddljob.options.selectedIndex].value;
        console.log('Job Id = ' + jobid);

        // Clear the options
        ddlemployee.options.length = 0;

        if (jobid > 0) {
            // Request the employees
            $.ajax({
                method: 'post',
                url: '@Url.Action("GetEmployee")',
                data: { 'jobid': jobid },
                datatype: 'json',
                traditional: true,
                success: function (data) {
                    $.each(data, function (i, employee) {
                        var option = document.createElement("option");
                        option.text = employee.Fullname;
                        option.value = employee.EmployeeId;
                        ddlemployee.appendChild(option);
                    });
                },
                error: function (ex) {
                    alert('Failed, ' + ex);
                }
            });
        }
    }


</script>
